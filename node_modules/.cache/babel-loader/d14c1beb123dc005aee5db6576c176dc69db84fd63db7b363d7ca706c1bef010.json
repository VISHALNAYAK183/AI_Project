{"ast":null,"code":"// src/services/geminiApi.js\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n/**\r\n * Initialize the GoogleGenerativeAI client with your Gemini API key.\r\n * WARNING: This exposes your key in client-side code.\r\n */\nconst genAI = new GoogleGenerativeAI('AIzaSyD1RqVeSGdfzaSSsLEbcF07jYcF22BXcEE');\n\n/**\r\n * Get a handle on the Gemini model you want: e.g. \"gemini-1.5-flash\".\r\n */\nconst model = genAI.getGenerativeModel({\n  model: 'gemini-1.5-flash'\n});\n\n/**\r\n * Helper to build a prompt from the conversation + new question.\r\n */\nfunction buildPrompt(question, conversation = [], sources = []) {\n  let prompt = '';\n  conversation.forEach(msg => {\n    if (msg.role === 'user') {\n      prompt += `User: ${msg.content}\\n`;\n    } else {\n      prompt += `Assistant: ${msg.content}\\n`;\n    }\n  });\n  if (sources.length > 0) {\n    prompt += `Relevant Documents/Links: ${sources.join(', ')}\\n`;\n  }\n\n  // End with the new question\n  prompt += `User: ${question}\\nAssistant:`;\n  return prompt;\n}\n\n/**\r\n * geminiQa\r\n *   question: user’s question\r\n *   conversation: entire array of { role, content } for context\r\n *   sources: references to doc IDs, file names, or Google links\r\n *\r\n * Returns { data: { answer: string } } so you can do e.g. `response.data.answer`.\r\n */\nexport async function geminiQa(question, conversation, sources) {\n  try {\n    var _result$response;\n    const prompt = buildPrompt(question, conversation, sources);\n    const result = await model.generateContent(prompt);\n\n    // The library returns an object with result.response?.text()\n    const answerText = ((_result$response = result.response) === null || _result$response === void 0 ? void 0 : _result$response.text()) || '';\n\n    // Return the response in a similar format as axios\n    return {\n      data: {\n        answer: answerText\n      }\n    };\n  } catch (error) {\n    console.error('Error calling Gemini:', error);\n    return {\n      data: {\n        answer: 'Error generating content.'\n      }\n    };\n  }\n}","map":{"version":3,"names":["GoogleGenerativeAI","genAI","model","getGenerativeModel","buildPrompt","question","conversation","sources","prompt","forEach","msg","role","content","length","join","geminiQa","_result$response","result","generateContent","answerText","response","text","data","answer","error","console"],"sources":["C:/Vishal_AI/My_AI/src/services/geminiApi.js"],"sourcesContent":["// src/services/geminiApi.js\r\nimport { GoogleGenerativeAI } from '@google/generative-ai';\r\n\r\n/**\r\n * Initialize the GoogleGenerativeAI client with your Gemini API key.\r\n * WARNING: This exposes your key in client-side code.\r\n */\r\nconst genAI = new GoogleGenerativeAI('AIzaSyD1RqVeSGdfzaSSsLEbcF07jYcF22BXcEE');\r\n\r\n/**\r\n * Get a handle on the Gemini model you want: e.g. \"gemini-1.5-flash\".\r\n */\r\nconst model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });\r\n\r\n/**\r\n * Helper to build a prompt from the conversation + new question.\r\n */\r\nfunction buildPrompt(question, conversation = [], sources = []) {\r\n  let prompt = '';\r\n  conversation.forEach((msg) => {\r\n    if (msg.role === 'user') {\r\n      prompt += `User: ${msg.content}\\n`;\r\n    } else {\r\n      prompt += `Assistant: ${msg.content}\\n`;\r\n    }\r\n  });\r\n\r\n  if (sources.length > 0) {\r\n    prompt += `Relevant Documents/Links: ${sources.join(', ')}\\n`;\r\n  }\r\n\r\n  // End with the new question\r\n  prompt += `User: ${question}\\nAssistant:`;\r\n\r\n  return prompt;\r\n}\r\n\r\n/**\r\n * geminiQa\r\n *   question: user’s question\r\n *   conversation: entire array of { role, content } for context\r\n *   sources: references to doc IDs, file names, or Google links\r\n *\r\n * Returns { data: { answer: string } } so you can do e.g. `response.data.answer`.\r\n */\r\nexport async function geminiQa(question, conversation, sources) {\r\n  try {\r\n    const prompt = buildPrompt(question, conversation, sources);\r\n    const result = await model.generateContent(prompt);\r\n\r\n    // The library returns an object with result.response?.text()\r\n    const answerText = result.response?.text() || '';\r\n\r\n    // Return the response in a similar format as axios\r\n    return {\r\n      data: {\r\n        answer: answerText,\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error('Error calling Gemini:', error);\r\n    return {\r\n      data: {\r\n        answer: 'Error generating content.',\r\n      },\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA;AACA;AACA;AACA,MAAMC,KAAK,GAAG,IAAID,kBAAkB,CAAC,yCAAyC,CAAC;;AAE/E;AACA;AACA;AACA,MAAME,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;EAAED,KAAK,EAAE;AAAmB,CAAC,CAAC;;AAErE;AACA;AACA;AACA,SAASE,WAAWA,CAACC,QAAQ,EAAEC,YAAY,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,EAAE;EAC9D,IAAIC,MAAM,GAAG,EAAE;EACfF,YAAY,CAACG,OAAO,CAAEC,GAAG,IAAK;IAC5B,IAAIA,GAAG,CAACC,IAAI,KAAK,MAAM,EAAE;MACvBH,MAAM,IAAI,SAASE,GAAG,CAACE,OAAO,IAAI;IACpC,CAAC,MAAM;MACLJ,MAAM,IAAI,cAAcE,GAAG,CAACE,OAAO,IAAI;IACzC;EACF,CAAC,CAAC;EAEF,IAAIL,OAAO,CAACM,MAAM,GAAG,CAAC,EAAE;IACtBL,MAAM,IAAI,6BAA6BD,OAAO,CAACO,IAAI,CAAC,IAAI,CAAC,IAAI;EAC/D;;EAEA;EACAN,MAAM,IAAI,SAASH,QAAQ,cAAc;EAEzC,OAAOG,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeO,QAAQA,CAACV,QAAQ,EAAEC,YAAY,EAAEC,OAAO,EAAE;EAC9D,IAAI;IAAA,IAAAS,gBAAA;IACF,MAAMR,MAAM,GAAGJ,WAAW,CAACC,QAAQ,EAAEC,YAAY,EAAEC,OAAO,CAAC;IAC3D,MAAMU,MAAM,GAAG,MAAMf,KAAK,CAACgB,eAAe,CAACV,MAAM,CAAC;;IAElD;IACA,MAAMW,UAAU,GAAG,EAAAH,gBAAA,GAAAC,MAAM,CAACG,QAAQ,cAAAJ,gBAAA,uBAAfA,gBAAA,CAAiBK,IAAI,CAAC,CAAC,KAAI,EAAE;;IAEhD;IACA,OAAO;MACLC,IAAI,EAAE;QACJC,MAAM,EAAEJ;MACV;IACF,CAAC;EACH,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,OAAO;MACLF,IAAI,EAAE;QACJC,MAAM,EAAE;MACV;IACF,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}