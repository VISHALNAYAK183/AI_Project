{"ast":null,"code":"var _jsxFileName = \"C:\\\\Vishal_AI\\\\My_AI\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx'; // Library for parsing Excel files\nimport mammoth from 'mammoth'; // Library for extracting text from Word documents\nimport { geminiQa } from './services/geminiApi'; // Custom API for handling questions and answers\nimport './App.css'; // External CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // State variables\n  const [selectedFile, setSelectedFile] = useState(null); // Stores the uploaded file\n  const [allText, setAllText] = useState([]); // Stores extracted text from the file\n  const [uploaded, setUploaded] = useState(false); // Tracks whether a file has been successfully uploaded\n  const [question, setQuestion] = useState(''); // Stores the user's question\n  const [messages, setMessages] = useState([]); // Stores chat messages between user and bot\n  const [loading, setLoading] = useState(false); // Tracks file processing/loading status\n  const [googleLink, setGoogleLink] = useState(''); // Stores the Google Docs/Sheets link\n  const [linkLoading, setLinkLoading] = useState(false); // Tracks Google Docs/Sheets link processing\n\n  // Handles file input change\n  const handleFileChange = e => {\n    const files = e.target.files;\n    setSelectedFile(files[0] || null); // Sets the selected file\n  };\n\n  // Handles file upload and determines the file type\n  const handleUpload = () => {\n    if (!selectedFile) {\n      alert('Please select a file.'); // Alerts user if no file is selected\n      return;\n    }\n    const fileExtension = selectedFile.name.split('.').pop().toLowerCase(); // Extracts file extension\n    setLoading(true); // Sets loading state\n\n    // Handles different file types: PDF, Word, and Excel\n    if (fileExtension === 'pdf') {\n      handlePdfUpload();\n    } else if (fileExtension === 'docx') {\n      handleWordUpload();\n    } else if (fileExtension === 'xlsx') {\n      handleExcelUpload();\n    } else {\n      alert('Unsupported file type. Please upload a PDF, Word, or Excel file.');\n      setLoading(false); // Stops loading for unsupported file types\n    }\n  };\n\n  // Handles PDF file upload and text extraction\n  const handlePdfUpload = () => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      extractTextFromPdf(reader.result); // Calls function to extract text from PDF\n    };\n    reader.readAsDataURL(selectedFile); // Reads the file as a data URL\n  };\n\n  // Handles Word file upload and text extraction using mammoth\n  const handleWordUpload = async () => {\n    try {\n      const reader = new FileReader();\n      reader.onload = async e => {\n        const arrayBuffer = e.target.result;\n        const result = await mammoth.extractRawText({\n          arrayBuffer\n        }); // Extracts text from Word file\n        setAllText([result.value]); // Stores the extracted text\n        setUploaded(true); // Marks upload as complete\n        setLoading(false); // Stops loading state\n      };\n      reader.readAsArrayBuffer(selectedFile); // Reads the file as an ArrayBuffer\n    } catch (err) {\n      alert(`Error processing Word file: ${err.message}`); // Alerts user on error\n      console.error(err); // Logs error for debugging\n      setLoading(false);\n    }\n  };\n\n  // Handles Excel file upload and text extraction using XLSX\n  const handleExcelUpload = () => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const data = new Uint8Array(e.target.result); // Reads data as an array buffer\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      }); // Reads workbook\n      const sheets = workbook.SheetNames; // Gets sheet names\n\n      // Extracts text from each sheet\n      const extracted = sheets.map(sheetName => XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {\n        header: 1\n      }).map(row => row.join(' ')) // Joins row values\n      .join('\\n') // Joins rows into text\n      );\n      setAllText(extracted); // Stores extracted text\n      setUploaded(true); // Marks upload as complete\n      setLoading(false); // Stops loading state\n    };\n    reader.readAsArrayBuffer(selectedFile);\n  };\n\n  // Extracts text from a PDF using pdf.js\n  async function extractTextFromPdf(pdfDataUrl) {\n    try {\n      const loadingTask = window.pdfjsLib.getDocument(pdfDataUrl);\n      const pdf = await loadingTask.promise; // Loads the PDF document\n      const pages = pdf.numPages; // Gets the number of pages\n      const extracted = []; // Array to store extracted text\n\n      // Loops through each page to extract text\n      for (let i = 1; i <= pages; i++) {\n        const page = await pdf.getPage(i);\n        const textContent = await page.getTextContent();\n        const pageText = textContent.items.map(s => s.str).join(''); // Joins text from the page\n        extracted.push(pageText);\n      }\n      setAllText(extracted); // Stores extracted text\n      setUploaded(true); // Marks upload as complete\n      setLoading(false); // Stops loading state\n    } catch (err) {\n      alert(`Error: ${err.message}`); // Alerts user on error\n      console.error(err); // Logs error for debugging\n      setLoading(false);\n    }\n  }\n\n  // Handles Google Docs/Sheets link processing\n  const handleProcessGoogleLink = async () => {\n    if (!googleLink) {\n      alert('Please enter a Google Docs or Sheets link.');\n      return;\n    }\n    setLinkLoading(true); // Sets link loading state\n    try {\n      const docId = extractGoogleDocId(googleLink); // Extracts document ID\n      if (docId) {\n        const text = await fetchGoogleDocContent(docId); // Fetches document content\n        setAllText([text]); // Stores the extracted text\n        setUploaded(true); // Marks upload as complete\n      } else {\n        alert('Invalid Google Docs/Sheets link'); // Alerts for invalid link\n      }\n    } catch (error) {\n      console.error('Error processing Google link:', error); // Logs error\n      alert('Error processing Google Docs/Sheets link'); // Alerts user\n    } finally {\n      setLinkLoading(false); // Stops link loading state\n    }\n  };\n\n  // Extracts the Google Docs/Sheets document ID from the URL\n  const extractGoogleDocId = link => {\n    const regex = /(?:docs.google.com\\/(?:document|spreadsheets)\\/d\\/)([^/]+)/;\n    const match = link.match(regex);\n    return match ? match[1] : null;\n  };\n\n  // Fetches content from Google Docs/Sheets\n  const fetchGoogleDocContent = async docId => {\n    const docUrl = `https://docs.google.com/document/d/${docId}/export?format=txt`;\n    const response = await fetch(docUrl); // Fetches document as text\n    const text = await response.text(); // Converts response to text\n    return text;\n  };\n\n  // Resets state to allow uploading another file\n  const handleExtractAnother = () => {\n    setSelectedFile(null); // Clears the selected file\n    setAllText([]); // Clears extracted text\n    setUploaded(false); // Resets upload status\n    setMessages([]); // Clears chat messages\n  };\n\n  // Submits a question to the Gemini API and gets a response\n  const handleQuestionSubmit = async () => {\n    if (!question.trim()) return; // Ignores empty questions\n\n    try {\n      setMessages([...messages, {\n        text: question,\n        sender: 'user'\n      }]); // Adds user message to chat\n      setQuestion(''); // Clears the input field\n\n      const answer = await geminiQa(question, messages, allText); // Sends question to API\n      setMessages([...messages, {\n        text: question,\n        sender: 'user'\n      }, {\n        text: answer.data.answer,\n        sender: 'gemini'\n      } // Adds bot's response to chat\n      ]);\n    } catch (error) {\n      console.error('Error while asking Gemini:', error); // Logs error\n    }\n  };\n\n  // Handles Enter key press to submit question\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleQuestionSubmit(); // Submits the question\n      e.preventDefault(); // Prevents default behavior\n    }\n  };\n\n  // Component rendering\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"My AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"subtitle\",\n      children: \"Upload PDF, Word, Excel files or Google Docs/Sheets to explore their content via chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), !linkLoading && !loading && !uploaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Google Docs/Sheets Link\",\n        value: googleLink,\n        onChange: e => setGoogleLink(e.target.value),\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleProcessGoogleLink,\n        className: \"uploadButton\",\n        children: linkLoading ? 'Processing...' : 'Process Google Docs/Sheets'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this), !loading && !linkLoading && !uploaded && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"orText\",\n      children: \"-- OR --\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 49\n    }, this), !linkLoading && !loading && !uploaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"customFileLabel\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n          onChange: handleFileChange,\n          className: \"fileInput\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), \"Choose File\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"fileName\",\n        children: selectedFile.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        className: `uploadButton ${selectedFile ? 'active' : 'inactive'}`,\n        children: \"Upload & Extract\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this), (loading || linkLoading) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loadingContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: linkLoading ? 'Processing Google Docs/Sheets...' : 'Processing your file...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this), uploaded && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resultSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleExtractAnother,\n        className: \"extractAnotherButton\",\n        children: \"Extract Another File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatBox\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: msg.sender === 'user' ? 'userMessage' : 'geminiMessage',\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: question,\n            onChange: e => setQuestion(e.target.value),\n            onKeyDown: handleKeyPress,\n            className: \"input\",\n            placeholder: \"Ask a question...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleQuestionSubmit,\n            className: \"sendButton\",\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\xA9 Proudly Developed By Vishal, All rights reserved\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"sdEO81CCVNxhEBMU7XLeR8xZpIM=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","XLSX","mammoth","geminiQa","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","allText","setAllText","uploaded","setUploaded","question","setQuestion","messages","setMessages","loading","setLoading","googleLink","setGoogleLink","linkLoading","setLinkLoading","handleFileChange","e","files","target","handleUpload","alert","fileExtension","name","split","pop","toLowerCase","handlePdfUpload","handleWordUpload","handleExcelUpload","reader","FileReader","onload","extractTextFromPdf","result","readAsDataURL","arrayBuffer","extractRawText","value","readAsArrayBuffer","err","message","console","error","data","Uint8Array","workbook","read","type","sheets","SheetNames","extracted","map","sheetName","utils","sheet_to_json","Sheets","header","row","join","pdfDataUrl","loadingTask","window","pdfjsLib","getDocument","pdf","promise","pages","numPages","i","page","getPage","textContent","getTextContent","pageText","items","s","str","push","handleProcessGoogleLink","docId","extractGoogleDocId","text","fetchGoogleDocContent","link","regex","match","docUrl","response","fetch","handleExtractAnother","handleQuestionSubmit","trim","sender","answer","handleKeyPress","key","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","accept","msg","index","onKeyDown","_c","$RefreshReg$"],"sources":["C:/Vishal_AI/My_AI/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx'; // Library for parsing Excel files\r\nimport mammoth from 'mammoth'; // Library for extracting text from Word documents\r\nimport { geminiQa } from './services/geminiApi'; // Custom API for handling questions and answers\r\nimport './App.css'; // External CSS file for styling\r\n\r\nexport default function App() {\r\n  // State variables\r\n  const [selectedFile, setSelectedFile] = useState(null); // Stores the uploaded file\r\n  const [allText, setAllText] = useState([]); // Stores extracted text from the file\r\n  const [uploaded, setUploaded] = useState(false); // Tracks whether a file has been successfully uploaded\r\n  const [question, setQuestion] = useState(''); // Stores the user's question\r\n  const [messages, setMessages] = useState([]); // Stores chat messages between user and bot\r\n  const [loading, setLoading] = useState(false); // Tracks file processing/loading status\r\n  const [googleLink, setGoogleLink] = useState(''); // Stores the Google Docs/Sheets link\r\n  const [linkLoading, setLinkLoading] = useState(false); // Tracks Google Docs/Sheets link processing\r\n\r\n  // Handles file input change\r\n  const handleFileChange = (e) => {\r\n    const files = e.target.files;\r\n    setSelectedFile(files[0] || null); // Sets the selected file\r\n  };\r\n\r\n  // Handles file upload and determines the file type\r\n  const handleUpload = () => {\r\n    if (!selectedFile) {\r\n      alert('Please select a file.'); // Alerts user if no file is selected\r\n      return;\r\n    }\r\n\r\n    const fileExtension = selectedFile.name.split('.').pop().toLowerCase(); // Extracts file extension\r\n    setLoading(true); // Sets loading state\r\n\r\n    // Handles different file types: PDF, Word, and Excel\r\n    if (fileExtension === 'pdf') {\r\n      handlePdfUpload();\r\n    } else if (fileExtension === 'docx') {\r\n      handleWordUpload();\r\n    } else if (fileExtension === 'xlsx') {\r\n      handleExcelUpload();\r\n    } else {\r\n      alert('Unsupported file type. Please upload a PDF, Word, or Excel file.');\r\n      setLoading(false); // Stops loading for unsupported file types\r\n    }\r\n  };\r\n\r\n  // Handles PDF file upload and text extraction\r\n  const handlePdfUpload = () => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      extractTextFromPdf(reader.result); // Calls function to extract text from PDF\r\n    };\r\n    reader.readAsDataURL(selectedFile); // Reads the file as a data URL\r\n  };\r\n\r\n  // Handles Word file upload and text extraction using mammoth\r\n  const handleWordUpload = async () => {\r\n    try {\r\n      const reader = new FileReader();\r\n      reader.onload = async (e) => {\r\n        const arrayBuffer = e.target.result;\r\n        const result = await mammoth.extractRawText({ arrayBuffer }); // Extracts text from Word file\r\n        setAllText([result.value]); // Stores the extracted text\r\n        setUploaded(true); // Marks upload as complete\r\n        setLoading(false); // Stops loading state\r\n      };\r\n      reader.readAsArrayBuffer(selectedFile); // Reads the file as an ArrayBuffer\r\n    } catch (err) {\r\n      alert(`Error processing Word file: ${err.message}`); // Alerts user on error\r\n      console.error(err); // Logs error for debugging\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handles Excel file upload and text extraction using XLSX\r\n  const handleExcelUpload = () => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const data = new Uint8Array(e.target.result); // Reads data as an array buffer\r\n      const workbook = XLSX.read(data, { type: 'array' }); // Reads workbook\r\n      const sheets = workbook.SheetNames; // Gets sheet names\r\n\r\n      // Extracts text from each sheet\r\n      const extracted = sheets.map((sheetName) =>\r\n        XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], { header: 1 })\r\n          .map((row) => row.join(' ')) // Joins row values\r\n          .join('\\n') // Joins rows into text\r\n      );\r\n\r\n      setAllText(extracted); // Stores extracted text\r\n      setUploaded(true); // Marks upload as complete\r\n      setLoading(false); // Stops loading state\r\n    };\r\n    reader.readAsArrayBuffer(selectedFile);\r\n  };\r\n\r\n  // Extracts text from a PDF using pdf.js\r\n  async function extractTextFromPdf(pdfDataUrl) {\r\n    try {\r\n      const loadingTask = window.pdfjsLib.getDocument(pdfDataUrl);\r\n      const pdf = await loadingTask.promise; // Loads the PDF document\r\n      const pages = pdf.numPages; // Gets the number of pages\r\n      const extracted = []; // Array to store extracted text\r\n\r\n      // Loops through each page to extract text\r\n      for (let i = 1; i <= pages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const textContent = await page.getTextContent();\r\n        const pageText = textContent.items.map((s) => s.str).join(''); // Joins text from the page\r\n        extracted.push(pageText);\r\n      }\r\n\r\n      setAllText(extracted); // Stores extracted text\r\n      setUploaded(true); // Marks upload as complete\r\n      setLoading(false); // Stops loading state\r\n    } catch (err) {\r\n      alert(`Error: ${err.message}`); // Alerts user on error\r\n      console.error(err); // Logs error for debugging\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  // Handles Google Docs/Sheets link processing\r\n  const handleProcessGoogleLink = async () => {\r\n    if (!googleLink) {\r\n      alert('Please enter a Google Docs or Sheets link.');\r\n      return;\r\n    }\r\n    setLinkLoading(true); // Sets link loading state\r\n    try {\r\n      const docId = extractGoogleDocId(googleLink); // Extracts document ID\r\n      if (docId) {\r\n        const text = await fetchGoogleDocContent(docId); // Fetches document content\r\n        setAllText([text]); // Stores the extracted text\r\n        setUploaded(true); // Marks upload as complete\r\n      } else {\r\n        alert('Invalid Google Docs/Sheets link'); // Alerts for invalid link\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing Google link:', error); // Logs error\r\n      alert('Error processing Google Docs/Sheets link'); // Alerts user\r\n    } finally {\r\n      setLinkLoading(false); // Stops link loading state\r\n    }\r\n  };\r\n\r\n  // Extracts the Google Docs/Sheets document ID from the URL\r\n  const extractGoogleDocId = (link) => {\r\n    const regex = /(?:docs.google.com\\/(?:document|spreadsheets)\\/d\\/)([^/]+)/;\r\n    const match = link.match(regex);\r\n    return match ? match[1] : null;\r\n  };\r\n\r\n  // Fetches content from Google Docs/Sheets\r\n  const fetchGoogleDocContent = async (docId) => {\r\n    const docUrl = `https://docs.google.com/document/d/${docId}/export?format=txt`;\r\n    const response = await fetch(docUrl); // Fetches document as text\r\n    const text = await response.text(); // Converts response to text\r\n    return text;\r\n  };\r\n\r\n  // Resets state to allow uploading another file\r\n  const handleExtractAnother = () => {\r\n    setSelectedFile(null); // Clears the selected file\r\n    setAllText([]); // Clears extracted text\r\n    setUploaded(false); // Resets upload status\r\n    setMessages([]); // Clears chat messages\r\n  };\r\n\r\n  // Submits a question to the Gemini API and gets a response\r\n  const handleQuestionSubmit = async () => {\r\n    if (!question.trim()) return; // Ignores empty questions\r\n\r\n    try {\r\n      setMessages([...messages, { text: question, sender: 'user' }]); // Adds user message to chat\r\n      setQuestion(''); // Clears the input field\r\n\r\n      const answer = await geminiQa(question, messages, allText); // Sends question to API\r\n      setMessages([\r\n        ...messages,\r\n        { text: question, sender: 'user' },\r\n        { text: answer.data.answer, sender: 'gemini' }, // Adds bot's response to chat\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error while asking Gemini:', error); // Logs error\r\n    }\r\n  };\r\n\r\n  // Handles Enter key press to submit question\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleQuestionSubmit(); // Submits the question\r\n      e.preventDefault(); // Prevents default behavior\r\n    }\r\n  };\r\n\r\n  // Component rendering\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"title\">My AI</h1>\r\n      <p className=\"subtitle\">\r\n        Upload PDF, Word, Excel files or Google Docs/Sheets to explore their content via chat\r\n      </p>\r\n\r\n      {/* Upload and Process Google Link Section */}\r\n      {!linkLoading && !loading && !uploaded && (\r\n        <div className=\"uploadSection\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter Google Docs/Sheets Link\"\r\n            value={googleLink}\r\n            onChange={(e) => setGoogleLink(e.target.value)}\r\n            className=\"input\"\r\n          />\r\n          <button onClick={handleProcessGoogleLink} className=\"uploadButton\">\r\n            {linkLoading ? 'Processing...' : 'Process Google Docs/Sheets'}\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Divider */}\r\n      {!loading && !linkLoading && !uploaded && <p className=\"orText\">-- OR --</p>}\r\n\r\n      {/* File Upload Section */}\r\n      {!linkLoading && !loading && !uploaded && (\r\n        <div className=\"uploadSection\">\r\n          <label className=\"customFileLabel\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\"application/pdf,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n              onChange={handleFileChange}\r\n              className=\"fileInput\"\r\n            />\r\n            Choose File\r\n          </label>\r\n          {selectedFile && <p className=\"fileName\">{selectedFile.name}</p>}\r\n          <button\r\n            onClick={handleUpload}\r\n            className={`uploadButton ${selectedFile ? 'active' : 'inactive'}`}\r\n          >\r\n            Upload & Extract\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Loading Spinner */}\r\n      {(loading || linkLoading) && (\r\n        <div className=\"loadingContainer\">\r\n          <p>{linkLoading ? 'Processing Google Docs/Sheets...' : 'Processing your file...'}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Chat and Results Section */}\r\n      {uploaded && (\r\n        <div className=\"resultSection\">\r\n          <button onClick={handleExtractAnother} className=\"extractAnotherButton\">\r\n            Extract Another File\r\n          </button>\r\n          <div className=\"chatContainer\">\r\n            <div className=\"chatBox\">\r\n              {messages.map((msg, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={msg.sender === 'user' ? 'userMessage' : 'geminiMessage'}\r\n                >\r\n                  {msg.text}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"inputContainer\">\r\n              <input\r\n                type=\"text\"\r\n                value={question}\r\n                onChange={(e) => setQuestion(e.target.value)}\r\n                onKeyDown={handleKeyPress}\r\n                className=\"input\"\r\n                placeholder=\"Ask a question...\"\r\n              />\r\n              <button onClick={handleQuestionSubmit} className=\"sendButton\">\r\n                Send\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Footer */}\r\n      <div className=\"footer\">\r\n        <p>© Proudly Developed By Vishal, All rights reserved</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}